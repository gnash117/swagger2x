#############################
#
#    copyright 2016 Open Interconnect Consortium, Inc. All rights reserved.
#    Redistribution and use in source and binary forms, with or without modification,
#    are permitted provided that the following conditions are met:
#    1.  Redistributions of source code must retain the above copyright notice,
#        this list of conditions and the following disclaimer.
#    2.  Redistributions in binary form must reproduce the above copyright notice,
#        this list of conditions and the following disclaimer in the documentation and/or other materials provided
#        with the distribution.
#         
#    THIS SOFTWARE IS PROVIDED BY THE OPEN INTERCONNECT CONSORTIUM, INC. "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR
#    WARRANTIES OF NON-INFRINGEMENT, ARE DISCLAIMED. IN NO EVENT SHALL THE OPEN INTERCONNECT CONSORTIUM, INC. OR
#    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#    OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
#    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#############################
# tool_version          : {{version}}
# input_file            : {{input_file}}
# version of input_file : {{json_data['info']['version']}}
# title of input_file   : {{json_data['info']['title']}}

import os
import shutil
import subprocess
import sys
import time
import threading
import json

from flask import Flask, render_template, jsonify, redirect, abort, request, send_from_directory, Response
app = Flask(__name__)


{% for path, path_data in json_data['paths'].items() %}
# path {{ path }}
{% for methodName, method_data in path_data.items() %}
# method: {{methodName}}
@app.route('{{path}}', methods=['{{methodName}}'])
def {{methodName}}_{{path|variablesyntax}}({{path_names(json_data, path)}}):
    # Method: {{methodName}}
    {% for property_name, property_data in method_data.items() %}{% if property_name == "description" %}# description : {{property_data}}{% endif %}{% endfor %}
    # query params
    {% for property_name, property_data in method_data.items() %}{% if property_name == "parameters" %}
    {% for parameter_data in property_data %}
    {% if parameter_data["in"] == "query" %} 
    # property name     : {{parameter_data["name"]}}  
    #          enum     : {{parameter_data["enum"]}}
    #          required : {{parameter_data["required"]}}
    {% endif %} {% if parameter_data["$ref"] %} 
    # property name : {{parameter_data["$ref"]}} : {{query_ref(json_data, parameter_data["$ref"], "name")}} 
    # enum     : {{query_ref(json_data, parameter_data["$ref"], "enum")}}
    # required     : {{query_ref(json_data, parameter_data["$ref"], "required")}}
    _{{query_ref(json_data, parameter_data["$ref"], "name")|variablesyntax}} = request.args.get('{{query_ref(json_data, parameter_data["$ref"], "name")}}')
    {% endif %}{% endfor %}{% endif %}{% endfor %}
    {% if methodName is hasbody %} {% for property_name, property_data in method_data.items() %}{% if property_name == "parameters" %} {% for parameter_data in property_data %} {% if parameter_data["in"] == "body" %} 
    # example body: {{ parameter_data["x-example"] }}
    # data in string format and you have to parse into dictionary
    req_data = request.data
    req_data_dict = json.loads(req_data)
    {% endif %}{% endfor %}{% endif %}{% endfor %}{% endif %}

    {% for property_name, property_data in method_data.items() %}{% if property_name == "responses" %}
    {% for response in property_data %}
    response_{{response}} = {{response}}
    response_{{response}}_example = {{property_data[response]["x-example"]}}
    # schema: {{property_data[response]["schema"]}}
    return Response(json.dumps(response_{{response}}_example),  mimetype='application/json')
    {% endfor %}{% endif %}{% endfor %}

{% endfor %}
{% endfor %}

if __name__ == '__main__':

    HOST_NAME = 'localhost';
    SERVER_PORT = 8888;

    # set the execution path of the tool
    if hasattr(sys, 'frozen'):
        my_dir = os.path.dirname(sys.executable)
    else:
        my_dir = os.path.dirname(sys.argv[0])

    if my_dir:
        os.chdir(my_dir)

    app.run(host=HOST_NAME, port=int(SERVER_PORT), debug=True)
    #app.run(use_debugger=True)
