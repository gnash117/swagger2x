//******************************************************************
//
// Copyright 2017 Open Connectivity Foundation
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=/
/*
 tool_version          : {{version}}
 input_file            : {{input_file}}
 version of input_file : {{json_data['info']['version']}}
 title of input_file   : {{json_data['info']['title']}}
*/
#include "oc_api.h"


{% for path, path_data in json_data['paths'].items() %}
// membervariables for path: {{path}}{% for var, var_data in query_properties(json_data, path).items() %}
static char g{{path|variablesyntax}}_RESOURCE_PROPERTY_NAME{{var|variablesyntax}}[] = "{{var}}"; // the name for the attribute
{{var_data.type|convert_to_c_type}} g{{path|variablesyntax}}{{var|variablesyntax}}; // the value for the attribute {% endfor -%}
{% endfor -%} 
// variables for the resources
{% for path, path_data in json_data['paths'].items() %}
static char g{{path|variablesyntax}}_RESOURCE_ENDPOINT[] = "{{path}}";  // used path for this resource
static char g{{path|variablesyntax}}_RESOURCE_TYPE[][25] = {{query_rt(json_data, path)|convert_to_c_type_array}}; // rt value (as an array)
static char g{{path|variablesyntax}}_RESOURCE_INTERFACE[][25] = {{query_if(json_data, path)|convert_to_c_type_array}}; // interface if (as an array) 
{% endfor -%}



// TODO: remove this
//static bool state = false;
//int power;
//oc_string_t name;

/**
*  function to convert the interface string defintion to the constant
* @param interface the interface string e.g. "oic.if.a"
*/
static int
convert_if_string(char *interface_name)
{
  if (strcmp(interface_name, "oic.if.baseline") == 0) return OC_IF_BASELINE;
  if (strcmp(interface_name, "oic.if.rw") == 0) return OC_IF_RW;
  if (strcmp(interface_name, "oic.if.r" )== 0) return OC_IF_R;
  if (strcmp(interface_name, "oic.if.s") == 0) return OC_IF_S;
  if (strcmp(interface_name, "oic.if.a") == 0) return OC_IF_A;
  if (strcmp(interface_name, "oic.if.b") == 0) return OC_IF_B;
  //if strcmp(interface_name, "oic.if.lb") == 0) return OC_IF_LB;
  if (strcmp(interface_name, "oic.if.ll") == 0) return OC_IF_LL;
  return OC_IF_A;
}

/**
*  function to set up the device.
*
*/
static int
app_init(void)
{
  int ret = oc_init_platform("{{manufactorer}}", NULL, NULL);
  ret |= oc_add_device("/oic/d", "{{device_type}}", "{{json_data['info']['title']}}", "ocf.1.0.0",
                       "ocf.res.1.0.0", NULL, NULL);
  //oc_new_string(&name, "John's Light", 12);
  return ret;
}

{% for path, path_data in json_data['paths'].items() -%}
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" %} 
/**
*  get method for {{path}} to assign the returned values to the member values
* @param request the request representation.
* @param interface the interface.
* @param user_data the user data.
* TODO: this function is also referenced when only get is implemented, something to fix..
*/
static void
get{{path|variablesyntax}}(oc_request_t *request, oc_interface_mask_t interface, void *user_data)
{
  (void)user_data;  // not used

  PRINT("get{{path|variablesyntax}}:\n");
  oc_rep_start_root_object();
  switch (interface) {
  case OC_IF_BASELINE:
    oc_process_baseline_interface(request->resource);
  case OC_IF_RW:
    //oc_rep_set_boolean(root, state, state);
    //oc_rep_set_int(root, power, power);
    //oc_rep_set_text_string(root, name, oc_string(name));
    break;
  default:
    break;
  }
  oc_rep_end_root_object();
  oc_send_response(request, OC_STATUS_OK);
}
{% endif -%}
{% endfor -%}
{% endfor -%}  


{% for path, path_data in json_data['paths'].items() -%}
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "post" %} 
/**
*  post method for {{path}} to assign the returned values to the member values
* @param requestRep the request representation.
*/
static void
post{{path|variablesyntax}}(oc_request_t *request, oc_interface_mask_t interface, void *user_data)
{
    (void)interface;
    (void)user_data;
    PRINT("post{{path|variablesyntax}}:\n");
    oc_rep_t *rep = request->request_payload;
    while (rep != NULL) {
        PRINT("key: %s ", oc_string(rep->name));
        switch (rep->type) {
        case BOOL:
          //state = rep->value.boolean;
          //PRINT("value: %d\n", state);
          break;
        case INT:
          //power = rep->value.integer;
          //PRINT("value: %d\n", power);
          break;
        case STRING:
          //oc_free_string(&name);
          //oc_new_string(&name, oc_string(rep->value.string),
          //              oc_string_len(rep->value.string));
          break;
        default:
          oc_send_response(request, OC_STATUS_BAD_REQUEST);
          return;
          break;
        }
        rep = rep->next;
      }
      oc_send_response(request, OC_STATUS_CHANGED);
}
{% endif -%}
{% endfor -%}
{% endfor -%}  

{% for path, path_data in json_data['paths'].items() -%}
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "put" %} 
/**
*  post method for {{path}} to assign the returned values to the member values
* @param requestRep the request representation.
*/
static void
put{{path|variablesyntax}}(oc_request_t *request, oc_interface_mask_t interface, void *user_data)
{
    (void)interface;
    (void)user_data;
    PRINT("put{{path|variablesyntax}}:\n");
    oc_rep_t *rep = request->request_payload;
    while (rep != NULL) {
        PRINT("key: %s ", oc_string(rep->name));
        switch (rep->type) {
        case BOOL:
            //state = rep->value.boolean;
            //PRINT("value: %d\n", state);
            break;
        case INT:
            //power = rep->value.integer;
            //PRINT("value: %d\n", power);
            break;
        case STRING:
          //oc_free_string(&name);
          //oc_new_string(&name, oc_string(rep->value.string),
          //              oc_string_len(rep->value.string));
          break;
        default:
          oc_send_response(request, OC_STATUS_BAD_REQUEST);
          return;
          break;
        }
        rep = rep->next;
      }
      oc_send_response(request, OC_STATUS_CHANGED);
}
{% endif -%}
{% endfor -%}
{% endfor -%}  

/**
*  register all the resources
*/
static void
register_resources(void)
{
{% for path, path_data in json_data['paths'].items() %}
    oc_resource_t *res{{path|variablesyntax}} = oc_new_resource(NULL, g{{path|variablesyntax}}_RESOURCE_ENDPOINT, 2, 0);
    for( unsigned int a = 1; a < sizeof(g{{path|variablesyntax}}_RESOURCE_TYPE); a++ )
    {
        oc_resource_bind_resource_type(res{{path|variablesyntax}},g{{path|variablesyntax}}_RESOURCE_TYPE[a]);
    }
    for( unsigned int a = 1; a < sizeof(g{{path|variablesyntax}}_RESOURCE_INTERFACE); a++ )
    {
        oc_resource_bind_resource_interface(res{{path|variablesyntax}}, convert_if_string(g{{path|variablesyntax}}_RESOURCE_INTERFACE[a]));
    }
    //oc_resource_set_default_interface(res{{path|variablesyntax}}, OC_IF_RW);  
    oc_resource_set_discoverable(res{{path|variablesyntax}}, true);
    oc_resource_set_periodic_observable(res{{path|variablesyntax}}, 1);
  {% for methodName, method_data in path_data.items() -%}
  {% if methodName == "get" %} 
    oc_resource_set_request_handler(res{{path|variablesyntax}}, OC_GET, get{{path|variablesyntax}}, NULL);
  {% endif -%}
  {% if methodName == "post" %} 
    oc_resource_set_request_handler(res{{path|variablesyntax}}, OC_POST, post{{path|variablesyntax}}, NULL);
  {% endif -%}
  {% if methodName == "put" %} 
    oc_resource_set_request_handler(res{{path|variablesyntax}}, OC_PUT, put{{path|variablesyntax}}, NULL);
  {% endif -%}
{% endfor -%}   oc_add_resource(res{{path|variablesyntax}});
{% endfor -%}
}

#if defined(CONFIG_MICROKERNEL) || defined(CONFIG_NANOKERNEL) /* Zephyr */

#include <string.h>
#include <zephyr.h>

static struct nano_sem block;

static void
signal_event_loop(void)
{
  nano_sem_give(&block);
}

void
main(void)
{
  static const oc_handler_t handler = {.init = app_init,
                                       .signal_event_loop = signal_event_loop,
                                       .register_resources =
                                         register_resources };

  nano_sem_init(&block);

  if (oc_main_init(&handler) < 0)
    return;

  oc_clock_time_t next_event;

  while (true) {
    next_event = oc_main_poll();
    if (next_event == 0)
      next_event = TICKS_UNLIMITED;
    else
      next_event -= oc_clock_time();
    nano_task_sem_take(&block, next_event);
  }

  oc_main_shutdown();
}

#elif defined(__linux__) /* Linux */
#include "port/oc_clock.h"
#include <pthread.h>
#include <signal.h>
#include <stdio.h>

pthread_mutex_t mutex;
pthread_cond_t cv;
struct timespec ts;

int quit = 0;

static void
signal_event_loop(void)
{
  pthread_mutex_lock(&mutex);
  pthread_cond_signal(&cv);
  pthread_mutex_unlock(&mutex);
}

void
handle_signal(int signal)
{
  (void)signal;
  signal_event_loop();
  quit = 1;
}

int
main(void)
{
  int init;
  struct sigaction sa;
  sigfillset(&sa.sa_mask);
  sa.sa_flags = 0;
  sa.sa_handler = handle_signal;
  sigaction(SIGINT, &sa, NULL);

  static const oc_handler_t handler = {.init = app_init,
                                       .signal_event_loop = signal_event_loop,
                                       .register_resources =
                                         register_resources };

  oc_clock_time_t next_event;

#ifdef OC_SECURITY
  oc_storage_config("./simpleserver_creds");
#endif /* OC_SECURITY */

  init = oc_main_init(&handler);
  if (init < 0)
    return init;

  while (quit != 1) {
    next_event = oc_main_poll();
    pthread_mutex_lock(&mutex);
    if (next_event == 0) {
      pthread_cond_wait(&cv, &mutex);
    } else {
      ts.tv_sec = (next_event / OC_CLOCK_SECOND);
      ts.tv_nsec = (next_event % OC_CLOCK_SECOND) * 1.e09 / OC_CLOCK_SECOND;
      pthread_cond_timedwait(&cv, &mutex, &ts);
    }
    pthread_mutex_unlock(&mutex);
  }

  oc_main_shutdown();
  return 0;
}
#endif /* __linux__ */
