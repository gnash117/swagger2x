//******************************************************************
//
// Copyright 2017 Open Connectivity Foundation
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=/
/*
 tool_version          : {{version}}
 input_file            : {{input_file}}
 version of input_file : {{json_data['info']['version']}}
 title of input_file   : {{json_data['info']['title']}}
*/

#include "oc_api.h"
#include "port/oc_clock.h"
#include <signal.h>

//#ifdef HAVE_WINDOWS_H
#include <windows.h>
//#endif

//#ifdef HAVE_WINDOWS_H
static CONDITION_VARIABLE cv;   // event loop variable
static CRITICAL_SECTION cs;     // event loop variable
//#endif

#define MAX_STRING 25

volatile int quit = 0;			// stop variable
oc_string_t name;               // name of the device

{% for path, path_data in json_data['paths'].items() %}
// membervariables for path: {{path}}{% for var, var_data in query_properties_filtered(json_data, path).items() %}
static char g{{path|variablesyntax}}_RESOURCE_PROPERTY_NAME{{var|variablesyntax}}[] = "{{var}}"; // the name for the attribute
{{var_data.type|convert_to_c_type}} g{{path|variablesyntax}}{{var|variablesyntax}}; // the value for the attribute {% endfor -%}
{% endfor -%} 
// variables for the resources
{% for path, path_data in json_data['paths'].items() %}
static char g{{path|variablesyntax}}_RESOURCE_ENDPOINT[] = "{{path}}";  // used path for this resource
static char g{{path|variablesyntax}}_RESOURCE_TYPE[][MAX_STRING] = {{query_rt(json_data, path)|convert_to_c_type_array}}; // rt value (as an array)
int g{{path|variablesyntax}}_nr_resource_types = {{query_rt(json_data, path)|convert_array_size}};
static char g{{path|variablesyntax}}_RESOURCE_INTERFACE[][MAX_STRING] = {{query_if(json_data, path)|convert_to_c_type_array}}; // interface if (as an array) 
int g{{path|variablesyntax}}_nr_resource_interfaces = {{query_if(json_data, path)|convert_array_size}};
{% endfor -%}


/**
*  function to set up the device.
*
*/
static int
app_init(void)
{
  int ret = oc_init_platform("{{manufacturer}}", NULL, NULL);
  ret |= oc_add_device("/oic/d", "{{device_type}}", "{{json_data['info']['title']}}", 
                       "ocf.1.0.0", // icv value
                       "ocf.res.1.3.0, ocf.sh.1.3.0",  // dmv value
                       NULL, NULL);
  oc_new_string(&name, "{{manufacturer}}", sizeof("{{manufacturer}}") );
  return ret;
}


/**
*  function to convert the interface string definition to the constant
* @param interface the interface string e.g. "oic.if.a"
*/
static int
convert_if_string(char *interface_name)
{
  if (strcmp(interface_name, "oic.if.baseline") == 0) return OC_IF_BASELINE;
  if (strcmp(interface_name, "oic.if.rw") == 0) return OC_IF_RW;
  if (strcmp(interface_name, "oic.if.r" )== 0) return OC_IF_R;
  if (strcmp(interface_name, "oic.if.s") == 0) return OC_IF_S;
  if (strcmp(interface_name, "oic.if.a") == 0) return OC_IF_A;
  if (strcmp(interface_name, "oic.if.b") == 0) return OC_IF_B;
  //if strcmp(interface_name, "oic.if.lb") == 0) return OC_IF_LB;
  if (strcmp(interface_name, "oic.if.ll") == 0) return OC_IF_LL;
  return OC_IF_A;
}


{% for path, path_data in json_data['paths'].items() -%}
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" %} 
/**
*  get method for {{path}} to assign the returned values to the member values
* @param request the request representation.
* @param interfaces the interfaces.
* @param user_data the user data.
* TODO: this function is also referenced when only get is implemented, something to fix..
*/
static void
get{{path|variablesyntax}}(oc_request_t *request, oc_interface_mask_t interfaces, void *user_data)
{
  (void)user_data;  // not used

  PRINT("get{{path|variablesyntax}}: interface %d\n", interfaces);
  oc_rep_start_root_object();
  switch (interfaces) {
  case OC_IF_BASELINE:
    //PRINT("   Adding Baseline info\n" );
    //oc_process_baseline_interface(request->resource);
    /* fall through */
  {%- if query_if_exist(json_data, path, "oic.if.a") %}
  case OC_IF_A:
  {% endif -%}
  {%- if query_if_exist(json_data, path, "oic.if.s") %}
  case OC_IF_S:
  {% endif -%}
  {%- if query_if_exist(json_data, path, "oic.if.r") %}
  case OC_IF_R:
  {% endif -%}
  {%- if query_if_exist(json_data, path, "oic.if.rw") %}
  case OC_IF_RW:
  {% endif -%}
    PRINT("   Adding Baseline info\n" );
    oc_process_baseline_interface(request->resource);
    {%- for var, var_data in query_properties_filtered(json_data, path).items() %}
    {% if var_data.type == "boolean" %}oc_rep_set_boolean(root, {{var}}, g{{path|variablesyntax}}{{var|variablesyntax}}); 
    PRINT("   %s : %d\n", g{{path|variablesyntax}}_RESOURCE_PROPERTY_NAME{{var|variablesyntax}},  g{{path|variablesyntax}}{{var|variablesyntax}} );
    {% endif -%}
    {% if var_data.type == "number" %}oc_rep_set_double(root, {{var}}, g{{path|variablesyntax}}{{var|variablesyntax}} ); 
    PRINT("   %s : %f\n", g{{path|variablesyntax}}_RESOURCE_PROPERTY_NAME{{var|variablesyntax}}, g{{path|variablesyntax}}{{var|variablesyntax}} );
    {% endif -%}
    {% if var_data.type == "integer" %}oc_rep_set_int(root, {{var}}, g{{path|variablesyntax}}{{var|variablesyntax}} ); 
    PRINT("   %s : %d\n", g{{path|variablesyntax}}_RESOURCE_PROPERTY_NAME{{var|variablesyntax}}, g{{path|variablesyntax}}{{var|variablesyntax}} );
    {% endif -%}
    {% if var_data.type == "string" %}oc_rep_set_text_string(root, g{{path|variablesyntax}}{{var}}, {{var}} ); 
    PRINT("   %s : %s\n", g{{path|variablesyntax}}_RESOURCE_PROPERTY_NAME{{var|variablesyntax}}, g{{path|variablesyntax}}{{var|variablesyntax}} );
    {% endif -%}
{% endfor -%}
  
    break;
  default:
    break;
  }
  oc_rep_end_root_object();
  oc_send_response(request, OC_STATUS_OK);
}
{% endif -%}
{% endfor -%}
{% endfor -%}  


{% for path, path_data in json_data['paths'].items() -%}
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "post" %} 
/**
*  post method for {{path}} to assign the returned values to the member values
* @param requestRep the request representation.
*/
static void
post{{path|variablesyntax}}(oc_request_t *request, oc_interface_mask_t interfaces, void *user_data)
{
    (void)interfaces;
    (void)user_data;
    PRINT("post{{path|variablesyntax}}:\n");
    oc_rep_t *rep = request->request_payload;
    while (rep != NULL) {
        PRINT("key: %s ", oc_string(rep->name));
        switch (rep->type) {
        case OC_REP_BOOL:
          //state = rep->value.boolean;
          //PRINT("value: %d\n", state);
          break;
        case OC_REP_INT:
          //power = rep->value.integer;
          //PRINT("value: %d\n", power);
          break;
        case OC_REP_STRING:
          //oc_free_string(&name);
          //oc_new_string(&name, oc_string(rep->value.string),
          //              oc_string_len(rep->value.string));
          break;
        default:
          oc_send_response(request, OC_STATUS_BAD_REQUEST);
          return;
          break;
        }
        rep = rep->next;
      }
      oc_send_response(request, OC_STATUS_CHANGED);
}
{% endif -%}
{% endfor -%}
{% endfor -%}  


/**
*  register all the resources
*/
static void
register_resources(void)
{
{% for path, path_data in json_data['paths'].items() %}
    PRINT("register resource with path {{path}}\n");
    oc_resource_t *res{{path|variablesyntax}} = oc_new_resource(NULL, g{{path|variablesyntax}}_RESOURCE_ENDPOINT, g{{path|variablesyntax}}_nr_resource_types, 0);
    PRINT("     number of resource types: %d\n", g{{path|variablesyntax}}_nr_resource_types);
    for( unsigned int a = 0; a < g{{path|variablesyntax}}_nr_resource_types; a++ )
    {
        PRINT("     resource type: %s\n", g{{path|variablesyntax}}_RESOURCE_TYPE[a]);
        oc_resource_bind_resource_type(res{{path|variablesyntax}},g{{path|variablesyntax}}_RESOURCE_TYPE[a]);
    }
    for( unsigned int a = 0; a < g{{path|variablesyntax}}_nr_resource_interfaces; a++ )
    {
        oc_resource_bind_resource_interface(res{{path|variablesyntax}}, convert_if_string(g{{path|variablesyntax}}_RESOURCE_INTERFACE[a]));
    }
    oc_resource_set_default_interface(res{{path|variablesyntax}}, convert_if_string(g{{path|variablesyntax}}_RESOURCE_INTERFACE[0]));  
    PRINT("     default interface: %d (%s)\n", convert_if_string(g{{path|variablesyntax}}_RESOURCE_INTERFACE[0]), g{{path|variablesyntax}}_RESOURCE_INTERFACE[0]);
    oc_resource_set_discoverable(res{{path|variablesyntax}}, true);
    oc_resource_set_periodic_observable(res{{path|variablesyntax}}, 1);
  {% for methodName, method_data in path_data.items() -%}
  {% if methodName == "get" %} 
    oc_resource_set_request_handler(res{{path|variablesyntax}}, OC_GET, get{{path|variablesyntax}}, NULL);
  {% endif -%}
  {% if methodName == "post" %} 
    oc_resource_set_request_handler(res{{path|variablesyntax}}, OC_POST, post{{path|variablesyntax}}, NULL);
  {% endif -%}
  {% if methodName == "put" %} 
    oc_resource_set_request_handler(res{{path|variablesyntax}}, OC_PUT, put{{path|variablesyntax}}, NULL);
  {% endif -%}
{% endfor -%}    oc_add_resource(res{{path|variablesyntax}});
{% endfor -%}
}


static void
signal_event_loop(void)
{
  WakeConditionVariable(&cv);
}

void
handle_signal(int signal)
{
  signal_event_loop();
  quit = 1;
}

int
main(void)
{
  InitializeCriticalSection(&cs);
  InitializeConditionVariable(&cv);
  
  
{%- for path, path_data in json_data['paths'].items() %}
  // initialize member variables {{path}}
  {% for var, var_data in query_properties_filtered(json_data, path).items() -%}
  {% if var_data.type == "boolean" %}g{{path|variablesyntax}}{{var|variablesyntax}} = {{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}; // current value of property "{{var}}" {{var_data["description"]}}
  {% endif -%}
  {% if var_data.type == "number" %}g{{path|variablesyntax}}{{var|variablesyntax}} = {{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}; // current value of property "{{var}}"  {{var_data["description"]}}
  {% endif -%}
  {% if var_data.type == "integer" %}g{{path|variablesyntax}}{{var|variablesyntax}} = {{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}; // current value of property "{{var}}" {{var_data["description"]}}
  {% endif -%}
  {% if var_data.type == "string" %}g{{path|variablesyntax}}{{var|variablesyntax}} = "{{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}";  // current value of property "{{var}}" {{var_data["description"]}}
  {% endif -%}
  {% if var_data.type == "object" %}// OBJECT NOT HANDLED  "{{var}}"
  {% endif -%}
  {% if var_data.type == "array" -%}
  // initialize vector {{var}}  {{var_data["description"]}}
  {% for var_value in swagger_property_data_schema(json_data, path, var) -%}
  {%- if var_data |convert_to_cplus_array_type == "std::vector<std::string>" %}
  //m_var_value{{var|variablesyntax}}.push_back("{{var_value}}");
  {%- elif var_data |convert_to_cplus_array_type == "std::vector<OCRepresentation>" %}
  // array of objects  ;; OBJECT NOT HANDLED YET
  {%- else%}
  m_var_value{{var|variablesyntax}}.push_back({{var_value}});
  {% endif -%}
  {% endfor -%}
  {% endif -%}
  {% endfor -%}
 {%- endfor %} 
  
  // no oic/con resource.
  oc_set_con_res_announced(false);

  int init;
  signal(SIGINT, handle_signal);
  static const oc_handler_t handler = {.init = app_init,
                                       .signal_event_loop = signal_event_loop,
                                       .register_resources = register_resources,
                                       .requests_entry = 0 };

  oc_clock_time_t next_event;
  
  
  PRINT("file : {{input_file}}\n");
  PRINT("title: {{json_data['info']['title']}}\n");
  

#ifdef OC_SECURITY
  PRINT("intialize secure resources\n");
  oc_storage_config("./simpleserver_creds/");
#endif /* OC_SECURITY */

  // initialize the IDD from a specific file
  // oc_set_introspection_file(0, "myfile.dat");

  init = oc_main_init(&handler);
  if (init < 0)
    return init;

  while (quit != 1) {
    next_event = oc_main_poll();
    if (next_event == 0) {
      SleepConditionVariableCS(&cv, &cs, INFINITE);
    } else {
      SleepConditionVariableCS(&cv, &cs,
                               (DWORD)(next_event / (1000 * OC_CLOCK_SECOND)));
    }
  }

  oc_main_shutdown();
  return 0;
}
