//******************************************************************
//
// Copyright 2017 Open Connectivity Foundation
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#ifndef SERVER_H_
#define SERVER_H_

#include <string>
#include <iostream>
#include <memory>
#include "ocstack.h"
#include "observer.h"
#include "OCPlatform.h"
#include "OCApi.h"

/*
 tool_version          : {{version}}
 input_file            : {{input_file}}
 version of input_file : {{json_data['info']['version']}}
 title of input_file   : {{json_data['info']['title']}}
*/

using namespace std;
using namespace OC;

{% for path, path_data in json_data['paths'].items() -%}
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" %} 
#define {{path|variablesyntax}}_RESOURCE_ENDPOINT "{{path}}"  // used path
#define {{path|variablesyntax}}_RESOURCE_TYPE "{{query_rt(json_data, path)}}"  // rt value (should be an array)
#define {{path|variablesyntax}}_RESOURCE_INTERFACE "{{query_if(json_data, path)}}" // interface if  (should be an array)
{% endif -%}
{% endfor -%}
{% endfor -%}


{% for path, path_data in json_data['paths'].items() -%}
{% for propname in query_properties(json_data, path) -%}
#define {{path|variablesyntax}}_RESOURCE_PROPERTY_NAME{{propname|variablesyntax}} "{{propname}}"
{% endfor -%}
{% endfor -%}

class IoTServer
{
    shared_ptr<PlatformConfig> m_platformConfig;
    void initializePlatform();
    void setupResources();
    void createResource(string, string, EntityHandler, OCResourceHandle&);
{% for path, path_data in json_data['paths'].items() -%}
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" %} 
    // path: {{path}}
    OCRepresentation m{{path|variablesyntax}}Representation;
    OCResourceHandle m{{path|variablesyntax}}Resource;
    ObservationIds m{{path|variablesyntax}}Observers;
    shared_ptr<IoTObserver> m{{path|variablesyntax}}ObserverLoop;
    OCRepresentation get{{path|variablesyntax}}Representation();
    OCEntityHandlerResult m{{path|variablesyntax}}EntityHandler(shared_ptr<OCResourceRequest>);
{% endif -%}
{% endfor -%}
{% endfor %}


{% for path, path_data in json_data['paths'].items() -%}
    // membervariables for path: {{path}}
{% for var, var_data in query_properties(json_data, path).items() %}
    {{var_data.type|convert_to_c_type}} m{{path|variablesyntax}}{{var|variablesyntax}}; {% endfor -%}
{% endfor %}

public:
    IoTServer();
    virtual ~IoTServer();
};

#endif /* SERVER_H_ */
