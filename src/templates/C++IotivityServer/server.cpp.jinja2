//******************************************************************
//
// Copyright 2017 Open Connectivity Foundation
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#include <signal.h>
#include <functional>
#include <string>
#include <iostream>
#include <memory>
#include <exception>

#ifdef HAVE_WINDOWS_H
#include <windows.h>
#endif

#include "ocstack.h"
#include "OCPlatform.h"
#include "OCApi.h"
#include "ocpayload.h"

using namespace OC;
namespace PH = std::placeholders;

/*
 tool_version          : {{version}}
 input_file            : {{input_file}}
 version of input_file : {{json_data['info']['version']}}
 title of input_file   : {{json_data['info']['title']}}
*/

#define INTERFACE_KEY "if"

/*
* default class, so that we have to define less variables/functions.
*/
class Resource
{
    protected:
    OCResourceHandle m_resourceHandle;
    OC::OCRepresentation m_rep;
    virtual OCEntityHandlerResult entityHandler(std::shared_ptr<OC::OCResourceRequest> request)=0;
};

{% for path, path_data in json_data['paths'].items() %}
/*
 * class definition for class that handles {{path}}
 *
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" -%}
 {{ method_data["description"] | code_indent(" * ")}}
{% endif %}{% endfor -%}
 */
class {{path|classsyntax}}Resource : public Resource
{
    public:
        /*
         * constructor
         *
         * @param resourceUri the uri for this resource
         */
        {{path|classsyntax}}Resource(std::string resourceUri = "{{path}}");

        /*
         * destructor
         */
         virtual ~{{path|classsyntax}}Resource(void);

        /*
         * Register the resource with the server
         *
         * setting resourceProperty as OC_DISCOVERABLE will allow Discovery of this resource
         * setting resourceProperty as OC_OBSERVABLE will allow observation
         * setting resourceProperty as OC_DISCOVERABLE | OC_OBSERVABLE will allow both discovery and observation
         * setting resourceProperty as OC_SECURE the resource supports access via secure endpoints
         * setting resourceProperty as OC_NONSECURE the resource supports access via non-secure endpoints
         * setting resourceProperty as OC_SECURE | OC_NONSECURE will allow access via secure and non-secure endpoints
         *
         * @param resourceProperty indicates the property of the resource. Defined in octypes.h.
         */
        OCStackResult registerResource(uint8_t resourceProperty = OC_DISCOVERABLE | OC_OBSERVABLE | OC_SECURE);

        /*
         * Attempt to send out notifications to observing clients
         * if no value on the device has been changed no notification
         * will be sent.
         *
         * @return OC_STACK_OK on success
         */
        OCStackResult sendNotification();
    private:
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" %}
        /*
         * Make the payload for the retrieve function (e.g. GET) {{path}}
{{method_data["description"] | code_indent("         * ")}}
         * @param queries  the query parameters for this call
         */
        OCRepresentation get(OC::QueryParamsMap queries);
{% endif -%}
{% if methodName == "post" %}
        /*
         * Parse the payload for the update function (e.g. POST) {{path}}
{{method_data["description"] | code_indent("         * ")}}
         * @param queries  the query parameters for this call
         * @param rep  the response to get the property values from
         * @return OCEntityHandlerResult ok or not ok indication
         */
        OCEntityHandlerResult post(OC::QueryParamsMap queries, const OC::OCRepresentation& rep);
{% endif -%}{% endfor %}

        std::string m_resourceUri;
        // resource types and interfaces as array..
        std::string m_RESOURCE_TYPE[{{query_rt(json_data, path)|convert_array_size}}] = {{query_rt(json_data, path)|convert_to_c_type_array}}; // rt value (as an array)
        std::string m_RESOURCE_INTERFACE[{{query_if(json_data, path)|convert_array_size}}] = {{query_if(json_data, path)|convert_to_c_type_array}}; // interface if (as an array)
        std::string m_IF_UPDATE[3] = {"oic.if.a", "oic.if.rw", "oic.if.baseline"}; // updateble interfaces
        int m_nr_resource_types = {{query_rt(json_data, path)|convert_array_size}};
        int m_nr_resource_interfaces = {{query_if(json_data, path)|convert_array_size}};
        ObservationIds m_interestedObservers;

        // member variables for path: "{{path}}"
        {% for var, var_data in query_properties(json_data, path).items() -%}
        {% if var_data.type == "array" -%}
        {{var_data |convert_to_cplus_array_type}}  m_var_value{{var|variablesyntax}}; // the value for the array attribute "{{var}}": {{var_data["description"]}}
        {% else -%}
        {{var_data.type|convert_to_cplus_type}} m_var_value{{var|variablesyntax}}; // the value for the attribute "{{var}}": {{var_data["description"]}}
        {% endif -%}
        std::string m_var_name{{var|variablesyntax}} = "{{var}}"; // the name for the attribute "{{var}}"
        {% endfor %}
    protected:
        /*
         * Check if the interface is
         * @param  interface_name the interface name used during the request
         * @return true: updatable interface
         */
        bool in_updatable_interfaces(std::string interface_name);

        /*
         * the entity handler for this resource
         * @param request the incoming request to handle
         * @return OCEntityHandlerResult ok or not ok indication
         */
        virtual OCEntityHandlerResult entityHandler(std::shared_ptr<OC::OCResourceRequest> request);
};

/*
* Constructor code
*/
{{path|classsyntax}}Resource::{{path|classsyntax}}Resource(std::string resourceUri)
{
    std::cout << "- Running: {{path|classsyntax}}Resource constructor" << std::endl;

    m_resourceUri = resourceUri;
    // initialize member variables {{path}}
    {% for var, var_data in query_properties(json_data, path).items() -%}
    {% if var_data.type == "boolean" %}m_var_value{{var|variablesyntax}} = {{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}; // current value of property "{{var}}" {{var_data["description"]}}
    {% endif -%}
    {% if var_data.type == "number" %}m_var_value{{var|variablesyntax}} = {{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}; // current value of property "{{var}}"  {{var_data["description"]}}
    {% endif -%}
    {% if var_data.type == "integer" %}m_var_value{{var|variablesyntax}} = {{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}; // current value of property "{{var}}" {{var_data["description"]}}
    {% endif -%}
    {% if var_data.type == "string" %}m_var_value{{var|variablesyntax}} = "{{swagger_property_data_schema(json_data, path, var)|init_value_if_empty(var_data.type)}}";  // current value of property "{{var}}" {{var_data["description"]}}
    {% endif -%}
    {% if var_data.type == "object" %}// OBJECT NOT HANDLED  "{{var}}"
    {% endif -%}
    {% if var_data.type == "array" -%}
    // initialize vector {{var}}  {{var_data["description"]}}
    {%- for var_value in swagger_property_data_schema(json_data, path, var) -%}
    {%- if var_data |convert_to_cplus_array_type == "std::vector<std::string>" %}
    m_var_value{{var|variablesyntax}}.push_back("{{var_value}}");
    {%- elif var_data |convert_to_cplus_array_type == "std::vector<OCRepresentation>" -%}
    // array of objects  ;; OBJECT NOT HANDLED YET
    {%- else -%}
    m_var_value{{var|variablesyntax}}.push_back({{var_value}});
    {% endif -%}
    {% endfor %}
    {% endif -%}
    {% endfor -%}
}

/*
* Destructor code
*/
{{path|classsyntax}}Resource::~{{path|classsyntax}}Resource() { }

OCStackResult {{path|classsyntax}}Resource::registerResource(uint8_t resourceProperty)
{
    OCStackResult result = OC_STACK_ERROR;
    EntityHandler cb = std::bind(&{{path|classsyntax}}Resource::entityHandler, this,PH::_1);
    result = OCPlatform::registerResource(m_resourceHandle,
                                          m_resourceUri,
                                          m_RESOURCE_TYPE[0],
                                          m_RESOURCE_INTERFACE[0],
                                          cb,
                                          resourceProperty);
    if(OC_STACK_OK != result)
    {
        std::cerr << "Failed to register {{path|classsyntax}}Resource." << std::endl;
        return result;
    }

    /// add the additional resource types
    for( int a = 1; a < m_nr_resource_types; a++ )
    {
        result = OCPlatform::bindTypeToResource(m_resourceHandle, m_RESOURCE_TYPE[a].c_str());
        if(OC_STACK_OK != result)
        {
            std::cerr << "Could not bind resource type:" << m_RESOURCE_INTERFACE[a] << std::endl;
            return result;
        }
    }
    // add the additional interfaces
    for( int a = 1; a < m_nr_resource_interfaces; a++)
    {
        result = OCPlatform::bindInterfaceToResource(m_resourceHandle, m_RESOURCE_INTERFACE[a].c_str());
        if(OC_STACK_OK != result)
        {
            std::cerr << "Could not bind interface:" << m_RESOURCE_INTERFACE[a] << std::endl;
            return result;
        }
    }

    std::cout << "{{path|classsyntax}}Resource:" << std::endl;
    std::cout << "\t" << "# resource interfaces: " << m_nr_resource_interfaces << std::endl;
    std::cout << "\t" << "# resource types     : " << m_nr_resource_types << std::endl;

    return result;
}

OCStackResult {{path|classsyntax}}Resource::sendNotification(void)
{
    OCStackResult sResult = OC_STACK_OK;
    if ( m_interestedObservers.size() > 0) {
        std::cout << "Notifying list "  << m_interestedObservers.size() << " of observers\n";
        auto pResponse = std::make_shared<OC::OCResourceResponse>();
        sResult = OCPlatform::notifyListOfObservers(m_resourceHandle,
                                                    m_interestedObservers,
                                                    pResponse);
    }
    return sResult;
}

{% for methodName, method_data in path_data.items() -%}
{% if methodName == "get" -%}
/*
* Make the payload for the retrieve function (e.g. GET) {{path}}
* @param queries  the query parameters for this call
*/
OCRepresentation {{path|classsyntax}}Resource::get(QueryParamsMap queries)
{
    OC_UNUSED(queries);

    {% for var, var_data in query_properties(json_data, path).items() -%}
    {% if var_data.type in  ["boolean" ] -%}
    std::cout << "\t\t" << "property '{{var}}' : "<< ((m_var_value{{var|variablesyntax}}) ? "true" : "false") << std::endl;
    {% endif -%}
    {% if var_data.type in  ["number", "integer", "string" ] -%}
    std::cout << "\t\t" << "property '{{var}}' : "<< m_var_value{{var|variablesyntax}} << std::endl;
    {% endif -%}
    {% endfor %}
    {%- for var, var_data in query_properties(json_data, path).items() -%}
    {% if var_data.type in  ["boolean", "number", "integer", "string" ] %}
    m_rep.setValue(m_var_name{{var|variablesyntax}}, m_var_value{{var|variablesyntax}} ); {% endif -%}
    {% if var_data.type == "array" %}
    m_rep.setValue(m_var_name{{var|variablesyntax}},  m_var_value{{var|variablesyntax}} ); {% endif -%}
    {% endfor %}

    return m_rep;
}
{% endif -%}
{% endfor -%}

{% for methodName, method_data in path_data.items() -%}
{% if methodName == "post" %}
/*
* Parse the payload for the update function (e.g. POST) {{path}}
* @param queries  the query parameters for this call
* @param rep  the response to get the property values from
* @return OCEntityHandlerResult ok or not ok indication
*/
OCEntityHandlerResult {{path|classsyntax}}Resource::post(QueryParamsMap queries, const OCRepresentation& rep)
{
    OCEntityHandlerResult ehResult = OC_EH_OK;
    OC_UNUSED(queries);
    {%- for var, var_data in query_properties(json_data, path).items() -%}
    {% if var_data.type == "boolean" %}
    try {
        if (rep.hasAttribute(m_var_name{{var|variablesyntax}}))
        {
            // value exist in payload
            {% if var_data.readOnly -%}
            {% if var_data.readOnly == true %}
            // check if "{{var}}" is read only
            ehResult = OC_EH_ERROR;
            std::cout << "\t\t" << "property '{{var}}' is readOnly "<< std::endl;
            {% endif -%}{% endif %}
        }
    }
    catch (std::exception& e)
    {
        std::cout << e.what() << std::endl;
    }{% endif -%}

    {% if var_data.type in ["integer", "number"] %}
    try {
        if (rep.hasAttribute(m_var_name{{var|variablesyntax}}))
        {
            // value exist in payload
            // allocate the variable
            {{var_data.type|convert_to_cplus_type}} value;
            // get the actual value from the payload
            rep.getValue(m_var_name{{var|variablesyntax}}, value);
            {% if var_data.readOnly -%}
            {% if var_data.readOnly == true %}
            // check if "{{var}}" is read only
            ehResult = OC_EH_ERROR;
            std::cout << "\t\t" << "property '{{var}}' is readOnly "<< std::endl;
            {% endif -%}{% endif %}
            {% if var_data.minimum %}if ( value < {{var_data.minimum}} )
            {
                // check the minimum range
                std::cout << "\t\t" << "property '{{var}}' value smaller than minimum :" << {{var_data.minimum}} << " value: " << value << std::endl;
                ehResult = OC_EH_ERROR;
            }{% endif %}
            {% if var_data.maximum %}if ( value > {{var_data.maximum}} )
            {
                // check the maximum range
                std::cout << "\t\t" << "property '{{var}}' value exceed max :" << {{var_data.maximum}} << " value: " <<value << std::endl;
                ehResult = OC_EH_ERROR;
            }{% endif %}
        }
    }
    catch (std::exception& e)
    {
        std::cout << e.what() << std::endl;
    }{% endif %}
    {% if var_data.type == "string" %}
    try {
        if (rep.hasAttribute(m_var_name{{var|variablesyntax}}))
        {
            // value exist in payload
            {% if var_data.readOnly -%}
            {% if var_data.readOnly == true %}
            // check if "{{var}}" is read only
            ehResult = OC_EH_ERROR;
            std::cout << "\t\t" << "property '{{var}}' is readOnly "<< std::endl;
            {% endif -%}{% endif %}
        }
    }
    catch (std::exception& e)
    {
        std::cout << e.what() << std::endl;
    }{% endif -%}
    {% if var_data.type == "array" %}
    // TODO add check on array contents out of range, etc..
    try {
        if (rep.hasAttribute(m_var_name{{var|variablesyntax}}))
        {
            // value exist in payload
            {% if var_data.readOnly -%}
            {% if var_data.readOnly == true %}
            // check if "{{var}}" is read only
            ehResult = OC_EH_ERROR;
            std::cout << "\t\t" << "property '{{var}}' is readOnly "<< std::endl;
            {% endif -%}{% endif %}
        }
    }
    catch (std::exception& e)
    {
        std::cout << e.what() << std::endl;
    }{% endif -%}

    {%- endfor -%}
    if (ehResult == OC_EH_OK)
    {
        // no error: assign the variables
        {% for var, var_data in query_properties(json_data, path).items() -%}
        {% if var_data.type == "boolean" %}
        try {
            bool temp;
            if (rep.getValue(m_var_name{{var|variablesyntax}}, temp ))
            {
                m_var_value{{var|variablesyntax}} = temp;
                std::cout << "\t\t" << "property '{{var}}' UPDATED: " << ((m_var_value{{var|variablesyntax}}) ? "true" : "false") << std::endl;
            }
            else
            {
                std::cout << "\t\t" << "property '{{var}}' not found in the representation" << std::endl;
            }
        }
        catch (std::exception& e)
        {
            std::cout << e.what() << std::endl;
        }{% endif -%}
        {% if var_data.type in ["number", "integer", "string" ] %}
        try {
            // value exist in payload
            {{var_data.type|convert_to_cplus_type}} temp;
            if (rep.getValue(m_var_name{{var|variablesyntax}}, temp ))
            {
                m_var_value{{var|variablesyntax}} = temp;
                std::cout << "\t\t" << "property '{{var}}' UPDATED: " << m_var_value{{var|variablesyntax}} << std::endl;
            }
            else
            {
                std::cout << "\t\t" << "property '{{var}}' not found in the representation" << std::endl;
            }
        }
        catch (std::exception& e)
        {
            std::cout << e.what() << std::endl;
        }{% endif -%}


        {% if var_data.type == "array" -%}
        // array only works for integer, boolean, numbers and strings
        {% if var_data |convert_to_cplus_array_type != "std::vector<OCRepresentation>"  -%}
        // TODO: make it also work with array of objects
        try {
            if (rep.hasAttribute(m_var_name{{var|variablesyntax}}))
            {
                rep.getValue(m_var_name{{var|variablesyntax}}, m_var_value{{var|variablesyntax}});
                int first = 1;
                std::cout << "\t\t" << "property '{{var}}' UPDATED: " ;
                for(auto myvar: m_var_value{{var|variablesyntax}})
                {
                    if(first)
                    {
                        std::cout << myvar;
                        first = 0;
                    }
                    else
                    {
                        std::cout << "," << myvar;
                    }
                }
                std::cout <<  std::endl;
            }
            else
            {
                std::cout << "\t\t" << "property '{{var}}' not found in the representation" << std::endl;
            }
        }
        catch (std::exception& e)
        {
            std::cout << e.what() << std::endl;
        }{% endif %}{% endif %}
    {%- endfor %}
    }
    return ehResult;
}
{% endif -%}
{% endfor -%}

/*
* Check if the interface name is an registered interface name
*/
bool {{path|classsyntax}}Resource::in_updatable_interfaces(std::string interface_name)
{
    for (int i=0; i<3; i++)
    {
        if (m_IF_UPDATE[i].compare(interface_name) == 0)
            return true;
    }
    return false;
}

/*
* the entity handler
*/
OCEntityHandlerResult {{path|classsyntax}}Resource::entityHandler(std::shared_ptr<OCResourceRequest> request)
{
    OCEntityHandlerResult ehResult = OC_EH_ERROR;
    //std::cout << "In entity handler for {{path|classsyntax}}Resource " << std::endl;

    if(request)
    {
        std::cout << "In entity handler for {{path|classsyntax}}Resource, URI is : "
                  << request->getResourceUri() << std::endl;

        // Check for query params (if any)
        QueryParamsMap queries = request->getQueryParameters();
        if (!queries.empty())
        {
            std::cout << "\nQuery processing up to entityHandler" << std::endl;
        }
        for (auto it : queries)
        {
            std::cout << "Query key: " << it.first << " value : " << it.second
                    << std::endl;
        }
        // get the value, so that we can AND it to check which flags are set
        int requestFlag = request->getRequestHandlerFlag();

        if(requestFlag & RequestHandlerFlag::RequestFlag)
        {
            // request flag is set
            auto pResponse = std::make_shared<OC::OCResourceResponse>();
            pResponse->setRequestHandle(request->getRequestHandle());
            pResponse->setResourceHandle(request->getResourceHandle());

            if(request->getRequestType() == "GET")
            {
                std::cout<<"{{path|classsyntax}}Resource Get Request"<< std::endl;

                pResponse->setResourceRepresentation(get(queries), "");
                if(OC_STACK_OK == OCPlatform::sendResponse(pResponse))
                {
                    ehResult = OC_EH_OK;
                }
            }
{% for methodName, method_data in path_data.items() -%}
{% if methodName == "post" %}
            else if(request->getRequestType() == "POST")
            {
                std::cout <<"{{path|classsyntax}}Resource Post Request"<<std::endl;
                bool  handle_post = true;

                if (queries.size() > 0)
                {
                    for (const auto &eachQuery : queries)
                    {
                        std::string key = eachQuery.first;
                        if (key.compare(INTERFACE_KEY) == 0)
                        {
                            std::string value = eachQuery.second;
                            if (in_updatable_interfaces(value) == false)
                            {
                                std::cout << "Update request received via interface: " << value
                                            << " . This interface is not authorized to update resource!!" << std::endl;
                                pResponse->setResponseResult(OCEntityHandlerResult::OC_EH_FORBIDDEN);
                                handle_post = false;
                                ehResult = OC_EH_ERROR;
                                break;
                            }
                        }
                    }
                }
                if (handle_post)
                {
                    ehResult = post(queries, request->getResourceRepresentation());
                    if (ehResult == OC_EH_OK)
                    {
                        pResponse->setResourceRepresentation(get(queries), "");
                        if (OC_STACK_OK == OCPlatform::sendResponse(pResponse))
                        {
                            if (OC_STACK_OK != sendNotification() )
                            {
                                std::cerr << "NOTIFY failed." << std::endl;
                            }
                        }
                    }
                    else
                    {
                         pResponse->setResponseResult(OCEntityHandlerResult::OC_EH_ERROR);
                    }
                }
            }
            {% endif -%}{% endfor -%}
            else
            {
                std::cout << "{{path|classsyntax}}Resource unsupported request type (delete,put,..)"
                    << request->getRequestType() << std::endl;
                pResponse->setResponseResult(OC_EH_ERROR);
                OCPlatform::sendResponse(pResponse);
                ehResult = OC_EH_ERROR;
            }
        }

        if(requestFlag & RequestHandlerFlag::ObserverFlag)
        {
            // observe flag is set
            ObservationInfo observationInfo = request->getObservationInfo();
            std::cout << "\t\trequestFlag : observer ";
            if (ObserveAction::ObserveRegister == observationInfo.action)
            {
                std::cout << "register" << std::endl; 
            } 
            else
            {
                std::cout << "unregister" << std::endl;
            }

            if(ObserveAction::ObserveRegister == observationInfo.action)
            {
                // add observer
                m_interestedObservers.push_back(observationInfo.obsId);
            }
            else if(ObserveAction::ObserveUnregister == observationInfo.action)
            {
                // delete observer
                m_interestedObservers.erase(std::remove(
                                            m_interestedObservers.begin(),
                                            m_interestedObservers.end(),
                                            observationInfo.obsId),
                                            m_interestedObservers.end());
            }
            ehResult = OC_EH_OK;
        }
    }
    return ehResult;
}

{% endfor %}

class IoTServer
{
    public:
        /**
         *  constructor
         *  creates all resources from the resource classes.
         */
        IoTServer();

        /**
         *  destructor
         */
        ~IoTServer();

        /*
         * Register the resources with the server
         *
         * setting resourceProperty as OC_DISCOVERABLE will allow Discovery of this resource
         * setting resourceProperty as OC_OBSERVABLE will allow observation
         * setting resourceProperty as OC_DISCOVERABLE | OC_OBSERVABLE will allow both discovery and observation
         * setting resourceProperty as OC_SECURE the resource supports access via secure endpoints
         * setting resourceProperty as OC_NONSECURE the resource supports access via non-secure endpoints
         * setting resourceProperty as OC_SECURE | OC_NONSECURE will allow access via secure and non-secure endpoints
         *
         * @param resourceProperty indicates the property of the resources. Defined in octypes.h.
         */
        OCStackResult registerResources(uint8_t resourceProperty = OC_DISCOVERABLE | OC_OBSERVABLE | OC_SECURE);

    private:
{%- for path, path_data in json_data['paths'].items() %}
        {{path|classsyntax}}Resource  m{{path|variablesyntax}}Instance;
{%- endfor -%}
};

IoTServer::IoTServer()
    :{% for path, path_data in json_data['paths'].items() -%}
{{"     " if not loop.first}}m{{path|variablesyntax}}Instance(){{ "," if not loop.last }}
{% endfor -%}
{
    std::cout << "Running IoTServer constructor" << std::endl;
}

IoTServer::~IoTServer()
{
    std::cout << "Running IoTServer destructor" << std::endl;
}

OCStackResult IoTServer::registerResources(uint8_t resourceProperty)
{
    OCStackResult result = OC_STACK_ERROR;
{%- for path, path_data in json_data['paths'].items() %}
    result = m{{path|variablesyntax}}Instance.registerResource(resourceProperty);
    if(OC_STACK_OK != result)
    {
        return result;
    }
{%- endfor -%}
    return result;
}

class Platform
{
public:
    /*
     * Platform constructor
     */
    Platform(void);

    /*
     * Platform destructor
     */
    virtual ~Platform();

    /*
     * Start the platform
     */
    OCStackResult start();

    /*
     * Register all platform info
     * This will register the platformId, manufaturerName, manufacturerUrl,
     * modelNumber, dateOfManufacture, platformVersion, operatingSystemVersion,
     * hardwareVersion, firmwareVersion, supportUrl, and systemTime
     */
    OCStackResult registerPlatformInfo(void);

    /*
     * Get OCPlatformInfo pointer
     */
    OCPlatformInfo* getPlatformInfo(void);

    /*
     * Stop the platform
     */
    OCStackResult stop(void);

    /*
     * SetDeviceInfo
     * Sets the device information ("/oic/d")
     *
     * @return OC_STACK_OK on success OC_STACK_ERROR on failure
     */
    OCStackResult setDeviceInfo(void);

    // Set of strings for each of device info fields
    std::string  deviceName = "{{json_data['info']['title']}}";
    std::string  deviceType = "{{device_type}}";
    std::string  specVersion = "ocf.1.0.0";
    std::vector<std::string> dataModelVersions;

    std::string  protocolIndependentID = "fa008167-3bbf-4c9d-8604-c9bcb96cb712";

private:
    // Set of strings for each of platform Info fields
    std::string m_platformId = "0A3E0D6F-DBF5-404E-8719-D6880042463A";
    std::string m_manufacturerName = "{{manufacturer}}";
    std::string m_manufacturerLink = "https://{{manufacturer}}.org/";
    std::string m_modelNumber = "ModelNumber";
    std::string m_dateOfManufacture = "2017-12-01";
    std::string m_platformVersion = "1.0";
    std::string m_operatingSystemVersion = "myOS";
    std::string m_hardwareVersion = "1.0";
    std::string m_firmwareVersion = "1.0";
    std::string m_supportLink = "https://{{manufacturer}}.org/";
    std::string m_systemTime = "2017-12-01T12:00:00.52Z";

    /*
    * duplicateString
    *
    * @param targetString  destination string, will be allocated
    * @param sourceString  source string, e.g. will be copied
    *  TODO: don't use strncpy
    */
    void duplicateString(char ** targetString, std::string sourceString);

    /**
     *  SetPlatformInfo
     *  Sets the platform information ("oic/p")
     *
     * @param platformID the platformID
     * @param manufacturerName the manufacturerName
     * @param manufacturerUrl the manufacturerUrl
     * @param modelNumber the modelNumber
     * @param platformVersion the platformVersion
     * @param operatingSystemVersion the operatingSystemVersion
     * @param hardwareVersion the hardwareVersion
     * @param firmwareVersion the firmwareVersion
     * @param supportUrl the supportUrl
     * @param systemTime the systemTime
     * @return OC_STACK_ERROR or OC_STACK_OK
     */
    void setPlatformInfo(std::string platformID,
                         std::string manufacturerName,
                         std::string manufacturerUrl,
                         std::string modelNumber,
                         std::string dateOfManufacture,
                         std::string platformVersion,
                         std::string operatingSystemVersion,
                         std::string hardwareVersion,
                         std::string firmwareVersion,
                         std::string supportUrl,
                         std::string systemTime);

    /*
     * deletePlatformInfo
     * Deleted the allocated platform information
     */
    void deletePlatformInfo(void);

    // OCPlatformInfo Contains all the platform info
    OCPlatformInfo platformInfo;
};

/**
*  server_fopen
*  opens file
*  implements redirection to open:
* - initial security settings
* - introspection file
* @param path path+filename of the file to open
* @param mode mode of the file to open
* @return the filehandle of the opened file (or error)
*/
FILE* server_fopen(const char* path, const char* mode)
{
    FILE* fileptr = NULL;

    if (0 == strcmp(path, OC_SECURITY_DB_DAT_FILE_NAME))
    {
        // reading the security initial setup file
        fileptr = fopen("server_security.dat", mode);
        std::cout << "reading security file 'server_security.dat' ptr: " << fileptr << std::endl;
        return fileptr;
    }
    else if (0 == strcmp(path, OC_INTROSPECTION_FILE_NAME))
    {
        // reading the introspection file
        fileptr = fopen("server_introspection.dat", mode);
        std::cout << "reading introspection file  'server_introspection.dat' ptr: " << fileptr << std::endl;
        return fileptr;
    }
    else
    {
        std::cout << "persistent storage - server_fopen: " << path << std::endl;
        return fopen(path, mode);
    }
}

// Create persistent storage handlers
OCPersistentStorage ps{server_fopen, fread, fwrite, fclose, unlink};

/*
* Platform Constructor
*/
Platform::Platform(void)
{
    std::cout << "Running Platform constructor" << std::endl;
    dataModelVersions.push_back("ocf.res.1.3.0");
    dataModelVersions.push_back("ocf.sh.1.3.0");

    // create the platform
    PlatformConfig cfg
    {
        ServiceType::InProc,
        ModeType::Server,
        &ps
    };
    OCPlatform::Configure(cfg);
    setPlatformInfo(m_platformId, m_manufacturerName, m_manufacturerLink,
                    m_modelNumber, m_dateOfManufacture, m_platformVersion,
                    m_operatingSystemVersion, m_hardwareVersion,
                    m_firmwareVersion, m_supportLink, m_systemTime);
}

/*
* Platform Destructor
*/
Platform::~Platform(void)
{
    std::cout << "Running Platform destructor" << std::endl;
    deletePlatformInfo();
}

OCStackResult Platform::start(void)
{
    return OCPlatform::start();
}

OCStackResult Platform::registerPlatformInfo(void)
{
    OCStackResult result = OC_STACK_ERROR;
    result = OCPlatform::registerPlatformInfo(platformInfo);
    return result;
}

OCPlatformInfo* Platform::getPlatformInfo(void)
{
    return &platformInfo;
}

OCStackResult Platform::stop(void)
{
    return OCPlatform::stop();
}

void Platform::duplicateString(char ** targetString, std::string sourceString)
{
    *targetString = new char[sourceString.length() + 1];
    strncpy(*targetString, sourceString.c_str(), (sourceString.length() + 1));
}

void Platform::setPlatformInfo(std::string platformID,
                               std::string manufacturerName,
                               std::string manufacturerUrl,
                               std::string modelNumber,
                               std::string dateOfManufacture,
                               std::string platformVersion,
                               std::string operatingSystemVersion,
                               std::string hardwareVersion,
                               std::string firmwareVersion,
                               std::string supportUrl,
                               std::string systemTime)
{
    duplicateString(&platformInfo.platformID, platformID);
    duplicateString(&platformInfo.manufacturerName, manufacturerName);
    duplicateString(&platformInfo.manufacturerUrl, manufacturerUrl);
    duplicateString(&platformInfo.modelNumber, modelNumber);
    duplicateString(&platformInfo.dateOfManufacture, dateOfManufacture);
    duplicateString(&platformInfo.platformVersion, platformVersion);
    duplicateString(&platformInfo.operatingSystemVersion, operatingSystemVersion);
    duplicateString(&platformInfo.hardwareVersion, hardwareVersion);
    duplicateString(&platformInfo.firmwareVersion, firmwareVersion);
    duplicateString(&platformInfo.supportUrl, supportUrl);
    duplicateString(&platformInfo.systemTime, systemTime);
}

void Platform::deletePlatformInfo()
{
    delete[] platformInfo.platformID;
    delete[] platformInfo.manufacturerName;
    delete[] platformInfo.manufacturerUrl;
    delete[] platformInfo.modelNumber;
    delete[] platformInfo.dateOfManufacture;
    delete[] platformInfo.platformVersion;
    delete[] platformInfo.operatingSystemVersion;
    delete[] platformInfo.hardwareVersion;
    delete[] platformInfo.firmwareVersion;
    delete[] platformInfo.supportUrl;
    delete[] platformInfo.systemTime;
}

/**
*  SetDeviceInfo
*  Sets the device information ("oic/d"), from the globals

* @return OC_STACK_ERROR or OC_STACK_OK
*/
OCStackResult Platform::setDeviceInfo()
{
    OCStackResult result = OC_STACK_ERROR;

    OCResourceHandle handle = OCGetResourceHandleAtUri(OC_RSRVD_DEVICE_URI);
    if (handle == NULL)
    {
        std::cout << "Failed to find resource " << OC_RSRVD_DEVICE_URI << std::endl;
        return result;
    }
    result = OCBindResourceTypeToResource(handle, deviceType.c_str());
    if (result != OC_STACK_OK)
    {
        std::cout << "Failed to add device type" << std::endl;
        return result;
    }
    result = OCPlatform::setPropertyValue(PAYLOAD_TYPE_DEVICE, OC_RSRVD_DEVICE_NAME, deviceName);
    if (result != OC_STACK_OK)
    {
        std::cout << "Failed to set device name" << std::endl;
        return result;
    }
    result = OCPlatform::setPropertyValue(PAYLOAD_TYPE_DEVICE, OC_RSRVD_DATA_MODEL_VERSION,
                                          dataModelVersions);
    if (result != OC_STACK_OK)
    {
        std::cout << "Failed to set data model versions" << std::endl;
        return result;
    }
    result = OCPlatform::setPropertyValue(PAYLOAD_TYPE_DEVICE, OC_RSRVD_SPEC_VERSION, specVersion);
    if (result != OC_STACK_OK)
    {
        std::cout << "Failed to set spec version" << std::endl;
        return result;
    }
    result = OCPlatform::setPropertyValue(PAYLOAD_TYPE_DEVICE, OC_RSRVD_PROTOCOL_INDEPENDENT_ID,
                                          protocolIndependentID);
    if (result != OC_STACK_OK)
    {
        std::cout << "Failed to set piid" << std::endl;
        return result;
    }

    return OC_STACK_OK;
}

#ifdef __unix__
// global needs static, otherwise it can be compiled out and then Ctrl-C does not work
static int quit = 0;
// handler for the signal to stop the application
void handle_signal(int signal)
{
    OC_UNUSED(signal);
    quit = 1;
}
#endif

// main application
// starts the server
int main(void)
{
    Platform platform;
    if(OC_STACK_OK != platform.start())
    {
        std::cerr << "Failed to start the IoTivity platform." << std::endl;
        return 1;
    }

    std::cout << "/oic/p" << std::endl;
    // initialize "/oic/p"
    if (OC_STACK_OK != platform.registerPlatformInfo())
    {
        std::cerr << "Failed platform registration (/oic/p)." << std::endl;
    }
    // initialize "/oic/d"
    std::cout << "/oic/d" << std::endl;
    if (OC_STACK_OK != platform.setDeviceInfo())
    {
        std::cerr << "Failed device registration (/oic/d)." << std::endl;
    }

    std::cout << "device type: " <<  platform.deviceType << std::endl;
    std::cout << "platformID: " <<  platform.getPlatformInfo()->platformID << std::endl;
    std::cout << "platform independent: " <<  platform.protocolIndependentID << std::endl;

    // create the server
    IoTServer server;
    if (OC_STACK_OK != server.registerResources())
    {
        std::cerr << "Failed to register server resources." << std::endl;
        return 1;
    }

#ifdef __unix__
    struct sigaction sa;
    sigfillset(&sa.sa_mask);
    sa.sa_flags = 0;
    sa.sa_handler = handle_signal;
    sigaction(SIGINT, &sa, NULL);
    std::cout << "Press Ctrl-C to quit...." << std::endl;
    do
    {
        usleep(2000000);
    }
    while (quit != 1);
#endif


#if defined(_WIN32)
    std::cout << "Press Ctrl-C to quit...." << std::endl;
    // we will keep the server alive for at most 30 minutes
    std::this_thread::sleep_for(std::chrono::minutes(30));
    OC_VERIFY(OCPlatform::stop() == OC_STACK_OK);
#endif

    return 0;
}
